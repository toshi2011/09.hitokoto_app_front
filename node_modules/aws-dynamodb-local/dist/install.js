"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = void 0;
const node_https_1 = require("node:https");
const node_zlib_1 = require("node:zlib");
const tar_1 = require("tar");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const deprecation_1 = require("./deprecation");
const constants_1 = require("./constants");
const install = async (arg0, arg1) => {
    if (typeof arg0 === 'function' && typeof arg1 === 'string') {
        (0, deprecation_1.deprecation)('Pass the installPath argument via the first object argument');
        await (0, exports.install)({ onComplete: arg0, installPath: arg1 });
        return;
    }
    if (typeof arg0 === 'function') {
        await (0, exports.install)({ onComplete: arg0 });
        return;
    }
    if (typeof arg1 === 'string') {
        (0, deprecation_1.deprecation)('Pass the installPath argument via the first object argument');
        await (0, exports.install)({ installPath: arg1 });
        return;
    }
    const installPath = arg0?.installPath ?? (0, node_path_1.resolve)(constants_1.defaultInstallPath);
    if (!(0, node_fs_1.existsSync)((0, node_path_1.join)(installPath, constants_1.jarFilename))) {
        // eslint-disable-next-line no-console
        console.log(`Installing DynamoDB Local from ${constants_1.downloadUrl}...`);
        await downloadTarGz(constants_1.downloadUrl, installPath);
        // eslint-disable-next-line no-console
        console.log('Installation of DynamoDB Local complete.');
    }
    if (arg0?.onComplete) {
        (0, deprecation_1.deprecation)('install() now returns a Promise to be awaited, that should be used instead of the onComplete callback.');
        arg0.onComplete();
    }
};
exports.install = install;
const downloadTarGz = (url, destinationDirectory) => {
    return new Promise((res) => {
        (0, node_fs_1.mkdirSync)(destinationDirectory, { recursive: true });
        (0, node_https_1.get)(url, (response) => {
            if (response.statusCode !== 200) {
                throw new Error(`Got status code ${response.statusCode} when attempting to download from ${url}`);
            }
            response
                .pipe((0, node_zlib_1.createUnzip)())
                .pipe((0, tar_1.extract)({
                cwd: destinationDirectory,
            }))
                .on('end', () => {
                res();
            })
                .on('error', (err) => {
                throw new Error(`Error while downloading: ${err}`);
            });
        })
            .on('error', (err) => {
            throw new Error(`Error while downloading: ${err}`);
        });
    });
};
